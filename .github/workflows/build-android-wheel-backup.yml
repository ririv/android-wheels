name: Reusable - Build Android Wheel

on:
  workflow_call:
    inputs:
      library-name:
        description: 'Name of the library'
        required: true
        type: string
      git-repository:
        description: 'Git repository of the library source'
        required: true
        type: string
      library-version:
        description: 'Git ref (tag/branch) of the library version'
        required: false
        type: string
      python-version:
        description: 'Python version (e.g., 3.13)'
        required: false
        type: string
        default: '3.13'
      android-api:
        description: 'Android API level'
        required: false
        type: string
        default: '24'

jobs:
  dispatch:
    runs-on: ubuntu-latest
    outputs:
      build_backend: ${{ steps.check_backend.outputs.build_backend }}
    steps:
      - name: Checkout self
        uses: actions/checkout@v4

      - name: Set up Python for checker script
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Clone library source
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.git-repository }}
          ref: ${{ inputs.library-version }}
          path: library-source
          submodules: recursive

      - name: Check build backend
        id: check_backend
        run: |
          chmod +x .github/scripts/build/check_backend.py
          BACKEND=$(python .github/scripts/build/check_backend.py library-source)
          echo "build_backend=$BACKEND" >> $GITHUB_OUTPUT

  build_with_maturin:
    name: Build for ${{ matrix.abi }} with maturin
    needs: dispatch
    if: needs.dispatch.outputs.build_backend == 'maturin'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - abi: "arm64-v8a"
            target: "aarch64-linux-android"
          - abi: "x86_64"
            target: "x86_64-linux-android"

    steps:
      - name: Set up Python for build script
        uses: actions/setup-python@v5
        with:
          python-version: '3.13' # A stable python version to run our script

      - name: Install script dependencies
        run: pip install uv build tomli-w

      - name: Checkout self
        uses: actions/checkout@v4

      - name: Clone library source
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.git-repository }}
          ref: ${{ inputs.library-version }}
          path: library-source
          fetch-depth: 1

      - name: Find project directory
        id: find_proj
        run: |
          cd library-source
          PROJECT_FILE=$(find . -name "pyproject.toml" -o -name "setup.py" | head -n 1)
          PROJECT_DIR=$(dirname "$PROJECT_FILE")
          echo "project_dir=$PROJECT_DIR" >> $GITHUB_OUTPUT

      - name: Run build script
        env:
          BUILD_METHOD: cross
          CIBW_LIBRARY_NAME: ${{ inputs.library-name }}
          CIBW_GIT_REPOSITORY: ${{ inputs.git-repository }}
          CIBW_LIBRARY_VERSION: ${{ inputs.library-version }}
          CIBW_SOURCE_DIR: ${{ steps.find_proj.outputs.project_dir }}
          CIBW_PYTHON_VERSION: ${{ inputs.python-version }}
          CIBW_ANDROID_API: ${{ inputs.android-api }}
          CIBW_TARGET_ABI: ${{ matrix.abi }}
          CIBW_TARGET_TRIPLET: ${{ matrix.target }}
        run: |
          chmod +x .github/scripts/build/build_android_wheel.py
          .github/scripts/build/build_android_wheel.py

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.library-name }}-android-wheel-${{ matrix.abi }}
          path: output/*.whl

  build_with_cibw:
    name: Build wheel for ${{ matrix.abi }} with cibw
    needs: dispatch
    if: needs.dispatch.outputs.build_backend != 'maturin'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        abi: [arm64_v8a, x86_64]

    steps:
      - name: Clone library source
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.git-repository }}
          ref: ${{ inputs.library-version }}
          path: library-source
          submodules: recursive

      - name: Prepare cibuildwheel environment
        run: |
          PYTHON_VERSION_NODOT=$(echo "${{ inputs.python-version }}" | tr -d '.')
          echo "CIBW_BUILD=cp${PYTHON_VERSION_NODOT}-*" >> $GITHUB_ENV

      - name: Find project directory
        id: find_proj
        run: |
          cd library-source
          PROJECT_FILE=$(find . -name "pyproject.toml" -o -name "setup.py" | head -n 1)
          PROJECT_DIR=$(dirname "$PROJECT_FILE")
          echo "project_dir=$PROJECT_DIR" >> $GITHUB_OUTPUT

      - name: Build wheels with cibuildwheel
        uses: pypa/cibuildwheel@v3.2.1
        with:
          package-dir: library-source/${{ steps.find_proj.outputs.project_dir }}
        env:
          CIBW_PLATFORM: android
          CIBW_ARCHS: ${{ matrix.abi }}
          CIBW_ENVIRONMENT: 'ANDROID_API_LEVEL=${{ inputs.android-api }}'
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BUILD_FRONTEND: build
          CIBW_TEST_SKIP: "*"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.library-name }}-android-wheel-${{ matrix.abi }}
          path: ./wheelhouse/*.whl

  upload-wheels:
    name: Upload Wheels
    needs: [build_with_maturin, build_with_cibw]
    if: always() && (needs.build_with_maturin.result == 'success' || needs.build_with_cibw.result == 'success')
    runs-on: ubuntu-latest
    concurrency:
      group: wheels-branch-update
      cancel-in-progress: false
    permissions:
      contents: write
      actions: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: wheels
          pattern: ${{ inputs.library-name }}-android-wheel-*
          merge-multiple: true
      - name: Commit wheels to 'wheels' branch
        run: |
          set -ex
          if [ ! -d "wheels" ] || [ -z "$(ls -A wheels)" ]; then
            echo "No wheels to commit"
            exit 0
          fi

          mkdir wheels_repo
          cd wheels_repo

          git init
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote add origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"

          if git fetch --depth=1 origin wheels && git checkout wheels; then
            echo "Checked out existing 'wheels' branch."
          else
            echo "Creating new 'wheels' branch."
            git checkout -b wheels
          fi

          cp ../wheels/* .

          git add .
          if git diff --staged --quiet; then
            echo "No new or updated wheels to commit."
            exit 0
          fi
          git commit -m "Build: Add/Update ${{ inputs.library-name }} wheels for version ${{ inputs.library-version || 'latest' }}"
          git push --set-upstream origin wheels

      - name: Trigger pages deployment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh workflow run pages.yml --ref main