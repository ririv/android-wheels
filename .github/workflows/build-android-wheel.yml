name: Reusable - Build Android Wheel

on:
  workflow_call:
    inputs:
      library-name:
        description: 'Name of the library (e.g., zstandard)'
        required: true
        type: string
      git-repository:
        description: 'Git repository of the library source (e.g., indygreg/python-zstandard)'
        required: true
        type: string
      library-version:
        description: 'Git ref (tag/branch) of the library version. Uses default branch if empty.'
        required: false
        type: string
      python-version:
        description: 'Python version'
        required: false
        type: string
        default: '3.13'
      ndk-version:
        description: 'Android NDK version'
        required: false
        type: string
        default: 'r26d'
      android-api:
        description: 'Android API level'
        required: false
        type: string
        default: '24'

env:
  PYTHON_VERSION: ${{ inputs.python-version }}
  NDK_VERSION: ${{ inputs.ndk-version }}
  ANDROID_API: ${{ inputs.android-api }}
  LIBRARY_NAME: ${{ inputs.library-name }}
  LIBRARY_VERSION: ${{ inputs.library-version }}
  GIT_REPOSITORY: ${{ inputs.git-repository }}

jobs:
  build:
    name: Build for ${{ matrix.abi }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - abi: "arm64-v8a"
            target: "aarch64-linux-android"
          - abi: "x86_64"
            target: "x86_64-linux-android"
    steps:
      - name: Set up environment variables
        run: echo "NDK_PATH=${{ runner.temp }}/android-ndk" >> $GITHUB_ENV
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Cache NDK
        id: cache-ndk
        uses: actions/cache@v4
        with:
          path: ${{ env.NDK_PATH }}/android-ndk-${{ env.NDK_VERSION }}
          key: ${{ runner.os }}-ndk-${{ env.NDK_VERSION }}
      - name: Download and Extract Android NDK
        if: steps.cache-ndk.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ env.NDK_PATH }}
          wget https://dl.google.com/android/repository/android-ndk-${{ env.NDK_VERSION }}-linux.zip -O ${{ env.NDK_PATH }}/ndk.zip
          unzip -q ${{ env.NDK_PATH }}/ndk.zip -d ${{ env.NDK_PATH }}
          rm ${{ env.NDK_PATH }}/ndk.zip
      - name: Install build tools
        run: python -m pip install --upgrade pip build maturin
      - name: Clone library source
        uses: actions/checkout@v4
        with:
          repository: ${{ env.GIT_REPOSITORY }}
          ref: ${{ env.LIBRARY_VERSION }}
          path: library-source
          submodules: recursive
      - name: Build wheel for ${{ matrix.abi }}
        env:
          NDK_HOME: "${{ env.NDK_PATH }}/android-ndk-${{ env.NDK_VERSION }}"
          TOOLCHAIN: "${{ env.NDK_PATH }}/android-ndk-${{ env.NDK_VERSION }}/toolchains/llvm/prebuilt/linux-x86_64"
        run: |
          set -ex
          export TARGET=${{ matrix.target }}
          export API=${{ env.ANDROID_API }}
          export CC=$TOOLCHAIN/bin/${TARGET}${API}-clang
          export CXX=$TOOLCHAIN/bin/${TARGET}${API}-clang++
          export AR=$TOOLCHAIN/bin/llvm-ar
          export LD=$TOOLCHAIN/bin/ld
          export STRIP=$TOOLCHAIN/bin/llvm-strip
          export CFLAGS="--sysroot=$TOOLCHAIN/sysroot"
          export LDFLAGS="--sysroot=$TOOLCHAIN/sysroot"
          BUILD_ROOT=$(pwd)/library-source
          cd library-source

          # Find the project root (where pyproject.toml or setup.py is)
          PROJECT_FILE=$(find . -name "pyproject.toml" -o -name "setup.py" | head -n 1)
          if [ -n "$PROJECT_FILE" ]; then
              PROJECT_DIR=$(dirname "$PROJECT_FILE")
              cd "$PROJECT_DIR"
          fi

          IS_MATURIN="false"
          if [ -f "pyproject.toml" ] && grep -q 'build-backend.*=.*"maturin"' pyproject.toml; then
            IS_MATURIN="true"
          fi

          if [ "$IS_MATURIN" = "true" ]; then
            echo "Maturin build backend detected."
            rustup target add ${{ matrix.target }}
            TARGET_FOR_ENV=$(echo ${{ matrix.target }} | tr 'a-z-' 'A-Z_')
            export CARGO_TARGET_${TARGET_FOR_ENV}_LINKER=${CC}
            export CARGO_TARGET_${TARGET_FOR_ENV}_AR=${AR}
            # Hints for PyO3 cross compilation so it doesn't try to use host libpython
            export PYO3_CROSS=1
            export PYO3_CROSS_PYTHON_VERSION=${{ env.PYTHON_VERSION }}
            FEATURES=""
            # Check if Cargo.toml has a direct dependency on pyo3 in the [dependencies] section
            if [ -f "Cargo.toml" ] && grep -q '^pyo3 ' Cargo.toml; then
              echo "Direct pyo3 dependency found. Will enable 'extension-module' and attempt abi3 to avoid linking libpython."
              FEATURES="pyo3/extension-module"
            fi

            if [ -n "$FEATURES" ]; then
              # Try abi3 first (broad compatibility), then fall back if unsupported
              set +e
              export PYO3_NO_PYTHON=1
              maturin build --release --target ${{ matrix.target }} -i python${{ env.PYTHON_VERSION }} --features "$FEATURES pyo3/abi3-py37"
              BUILD_STATUS=$?
              set -e
              if [ $BUILD_STATUS -ne 0 ]; then
                echo "abi3 build failed, retrying without abi3..."
                unset PYO3_NO_PYTHON
                maturin build --release --target ${{ matrix.target }} -i python${{ env.PYTHON_VERSION }} --features "$FEATURES"
              fi
            else
              maturin build --release --target ${{ matrix.target }} -i python${{ env.PYTHON_VERSION }}
            fi
          else
            echo "Standard build backend detected."
            python -m build --wheel
          fi

          # --- Normalization Step ---
          # According to PEP 427, wheel names normalize hyphens to underscores.
          NORMALIZED_LIB_NAME=$(echo "${{ env.LIBRARY_NAME }}" | tr '-' '_')
          PLATFORM_ARCH=$(echo "${{ matrix.abi }}" | tr '-' '_')
          echo "Normalized library name for search: ${NORMALIZED_LIB_NAME}"
          echo "Normalized platform arch for wheel tag: ${PLATFORM_ARCH}"

          # --- Find Wheel Step ---
          SEARCH_PATH="dist"
          if [ "$IS_MATURIN" = "true" ]; then
            echo "Maturin build backend detected. Searching in target/wheels/"
            SEARCH_PATH="target/wheels"
          else
            echo "Standard or no pyproject.toml build backend detected. Searching in dist/"
          fi

          WHEEL_PATH=$(find "${SEARCH_PATH}" -name "${NORMALIZED_LIB_NAME}-*.whl" | head -n 1)

          if [ -z "${WHEEL_PATH}" ]; then
            echo "::warning::Could not find wheel in '${SEARCH_PATH}'. Fallback to searching everywhere."
            WHEEL_PATH=$(find . -name "${NORMALIZED_LIB_NAME}-*.whl" | head -n 1)
          fi

          if [ -z "${WHEEL_PATH}" ]; then
            echo "::error::Failed to find wheel file anywhere for normalized name ${NORMALIZED_LIB_NAME}."
            exit 1
          fi

          # --- Rename Wheel Step ---
          # Extract Python/ABI tags from the built wheel to preserve abi3 when applicable
          WHEEL_BASENAME=$(basename "${WHEEL_PATH}")
          PY_FIELD=$(echo "${WHEEL_BASENAME}" | awk -F- '{print $3}')
          ABI_FIELD=$(echo "${WHEEL_BASENAME}" | awk -F- '{print $4}')
          if [ -z "${PY_FIELD}" ] || [ -z "${ABI_FIELD}" ]; then
            # Fallback to cp tag from requested Python version
            PY_FIELD="cp${PYTHON_VERSION//./}"
            ABI_FIELD="${PY_FIELD}"
          fi
          VERSION_TO_USE=${LIBRARY_VERSION}
          if [ -z "${VERSION_TO_USE}" ]; then
            VERSION_TO_USE=$(basename "${WHEEL_PATH}" | cut -d- -f2)
            echo "library-version not specified, using version from built wheel: ${VERSION_TO_USE}"
          fi
          
          NEW_WHEEL_NAME="${NORMALIZED_LIB_NAME}-${VERSION_TO_USE}-${PY_FIELD}-${ABI_FIELD}-android_${API}_${PLATFORM_ARCH}.whl"
          echo "Original wheel: ${WHEEL_PATH}"
          echo "New wheel name: ${NEW_WHEEL_NAME}"
          mkdir -p $BUILD_ROOT/../output
          mv "${WHEEL_PATH}" "$BUILD_ROOT/../output/${NEW_WHEEL_NAME}"
      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.LIBRARY_NAME }}-android-wheel-${{ matrix.abi }}
          path: output/*.whl

  upload-wheels:
    name: Upload Wheels
    needs: build
    runs-on: ubuntu-latest
    concurrency:
      group: wheels-branch-update
      cancel-in-progress: false
    permissions:
      contents: write
      actions: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: wheels
          pattern: ${{ env.LIBRARY_NAME }}-android-wheel-*
          merge-multiple: true
      - name: Commit wheels to 'wheels' branch
        run: |
          set -ex
          if [ ! -d "wheels" ] || [ -z "$(ls -A wheels)" ]; then
            echo "No wheels to commit"
            exit 0
          fi

          mkdir wheels_repo
          cd wheels_repo

          git init
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote add origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"

          if git fetch --depth=1 origin wheels && git checkout wheels; then
            echo "Checked out existing 'wheels' branch."
          else
            echo "Creating new 'wheels' branch."
            git checkout -b wheels
          fi

          cp ../wheels/* .

          git add .
          if git diff --staged --quiet; then
            echo "No new or updated wheels to commit."
            exit 0
          fi
          git commit -m "Build: Add/Update ${{ env.LIBRARY_NAME }} wheels for version ${{ env.LIBRARY_VERSION || 'latest' }}"
          git push --set-upstream origin wheels

      - name: Trigger pages deployment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh workflow run pages.yml --ref main