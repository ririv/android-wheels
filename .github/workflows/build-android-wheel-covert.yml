name: Reusable - Build Android Wheel

on:
  workflow_call:
    inputs:
      library-name:
        description: 'Name of the library'
        required: true
        type: string
      git-repository:
        description: 'Git repository of the library source'
        required: true
        type: string
      library-version:
        description: 'Git ref (tag/branch) of the library version'
        required: false
        type: string
      python-version:
        description: 'Python version (e.g., 3.13)'
        required: false
        type: string
        default: '3.13'
      android-api:
        description: 'Android API level'
        required: false
        type: string
        default: '24'

jobs:
  build:
    name: Build wheel for ${{ matrix.abi }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - abi: arm64_v8a
            cargo-target: aarch64-linux-android
          - abi: x86_64
            cargo-target: x86_64-linux-android

    steps:
      - name: Checkout self
        uses: actions/checkout@v4

      - name: Set up Python for script
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install script dependencies
        run: pip install tomli-w

      - name: Clone library source
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.git-repository }}
          ref: ${{ inputs.library-version }}
          path: library-source
          submodules: recursive

      - name: Install Rust target
        run: rustup target add ${{ matrix.cargo-target }}

      - name: Check build backend and convert if needed
        id: check_and_convert
        run: |
          chmod +x .github/scripts/build/check_backend.py
          BACKEND=$(python .github/scripts/build/check_backend.py library-source)
          echo "build_backend=$BACKEND" >> $GITHUB_OUTPUT
          if [ "$BACKEND" == "maturin" ]; then
            echo "Maturin backend detected, converting to setuptools-rust..."
            chmod +x .github/scripts/build/convert_to_setuptools_rust.py
            python .github/scripts/build/convert_to_setuptools_rust.py library-source
          fi

      - name: Prepare cibuildwheel environment
        run: |
          PYTHON_VERSION_NODOT=$(echo "${{ inputs.python-version }}" | tr -d '.')
          echo "CIBW_BUILD=cp${PYTHON_VERSION_NODOT}-*" >> $GITHUB_ENV

      - name: Find project directory
        id: find_proj
        run: |
          cd library-source
          PROJECT_FILE=$(find . -name "pyproject.toml" -o -name "setup.py" | head -n 1)
          PROJECT_DIR=$(dirname "$PROJECT_FILE")
          echo "project_dir=$PROJECT_DIR" >> $GITHUB_OUTPUT

      - name: Build wheels with cibuildwheel
        uses: pypa/cibuildwheel@v3.2.1
        with:
          package-dir: library-source/${{ steps.find_proj.outputs.project_dir }}
        env:
          CIBW_PLATFORM: android
          CIBW_ARCHS: ${{ matrix.abi }}
          CIBW_ENVIRONMENT: 'ANDROID_API_LEVEL=${{ inputs.android-api }} CARGO_BUILD_TARGET=${{ matrix.cargo-target }} CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android${{ inputs.android-api }}-clang CARGO_TARGET_AARCH64_LINUX_ANDROID_AR=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar CARGO_TARGET_X86_64_LINUX_ANDROID_LINKER=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android${{ inputs.android-api }}-clang CARGO_TARGET_X86_64_LINUX_ANDROID_AR=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar PYO3_CROSS=1 '
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BUILD_FRONTEND: build
          CIBW_TEST_SKIP: "*"
          CARGO_BUILD_TARGET: ${{ matrix.cargo-target }}
          CIBW_BEFORE_BUILD: |
            set -e
            # This command runs inside the cibuildwheel container.
            # It creates a config file that cargo will automatically read,
            # bypassing any shell scoping issues with `export`.
            mkdir -p "{package}/.cargo"
            CONFIG_PATH="{package}/.cargo/config.toml"

            # Derive the python library path from the VIRTUAL_ENV variable.
            BASE_DIR=$(dirname "$VIRTUAL_ENV")
            LIB_PATH="$BASE_DIR/python/prefix/lib"

            # Write the pyo3-specific variables to the config file.
            echo "[env]" > "$CONFIG_PATH"
            echo "PYO3_CROSS_LIB_DIR = \"$LIB_PATH\"" >> "$CONFIG_PATH"
            echo "PYO3_CROSS_PYTHON_VERSION = \"${{ inputs.python-version }}\"" >> "$CONFIG_PATH"

            echo "Cargo config created at $CONFIG_PATH:"
            cat "$CONFIG_PATH"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.library-name }}-android-wheel-${{ matrix.abi }}
          path: ./wheelhouse/*.whl

  upload-wheels:
    name: Upload Wheels
    needs: [build]
    if: always() && needs.build.result == 'success'
    runs-on: ubuntu-latest
    concurrency:
      group: wheels-branch-update
      cancel-in-progress: false
    permissions:
      contents: write
      actions: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: wheels
          pattern: ${{ inputs.library-name }}-android-wheel-*
          merge-multiple: true
      - name: Commit wheels to 'wheels' branch
        run: |
          set -ex
          if [ ! -d "wheels" ] || [ -z "$(ls -A wheels)" ]; then
            echo "No wheels to commit"
            exit 0
          fi

          mkdir wheels_repo
          cd wheels_repo

          git init
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote add origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"

          if git fetch --depth=1 origin wheels && git checkout wheels; then
            echo "Checked out existing 'wheels' branch."
          else
            echo "Creating new 'wheels' branch."
            git checkout -b wheels
          fi

          cp ../wheels/* .

          git add .
          if git diff --staged --quiet; then
            echo "No new or updated wheels to commit."
            exit 0
          fi
          git commit -m "Build: Add/Update ${{ inputs.library-name }} wheels for version ${{ inputs.library-version || 'latest' }}"
          git push --set-upstream origin wheels

      - name: Trigger pages deployment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh workflow run pages.yml --ref main